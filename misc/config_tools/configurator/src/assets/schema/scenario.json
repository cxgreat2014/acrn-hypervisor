{
	"$schema": "http://json-schema.org/draft-07/schema",
	"type": "object",
	"required": [
		"acrn-config"
	],
	"properties": {
		"acrn-config": {
			"$ref": "#/definitions/ACRNConfigType"
		}
	},
	"additionalProperties": true,
	"definitions": {
		"Boolean": {
			"type": "string",
			"enum": [
				"y",
				"n"
			]
		},
		"EnablementType": {
			"type": "string",
			"enum": [
				"Enable",
				"Disable"
			]
		},
		"HexFormat": {
			"type": "string",
			"pattern": "^0[Xx][0-9A-Fa-f]+|0$"
		},
		"None": {
			"type": "string",
			"pattern": "^[*]{0}$"
		},
		"BuildType": {
			"type": "string",
			"enum": [
				"release",
				"debug"
			]
		},
		"KernLoadAddr": {
			"anyOf": [
				{
					"title": "None",
					"type": "string",
					"pattern": "^[*]{0}$"
				},
				{
					"title": "HexFormat",
					"type": "string",
					"pattern": "^0[Xx][0-9A-Fa-f]+|0$"
				}
			]
		},
		"KernEntryAddr": {
			"anyOf": [
				{
					"title": "None",
					"type": "string",
					"pattern": "^[*]{0}$"
				},
				{
					"title": "HexFormat",
					"type": "string",
					"pattern": "^0[Xx][0-9A-Fa-f]+|0$"
				}
			]
		},
		"MaxMsixTableNumType": {
			"type": "integer",
			"minimum": 1,
			"maximum": 2048
		},
		"MaxMsixTableSizeType": {
			"anyOf": [
				{
					"title": "None",
					"type": "string",
					"pattern": "^[*]{0}$"
				},
				{
					"title": "MaxMsixTableNumType",
					"type": "integer",
					"minimum": 1,
					"maximum": 2048
				}
			]
		},
		"MemorySizeType": {
			"anyOf": [
				{
					"title": "HexFormat",
					"type": "string",
					"pattern": "^0[Xx][0-9A-Fa-f]+|0$"
				}
			]
		},
		"LogLevelType": {
			"type": "string",
			"enum": [
				"0",
				"1",
				"2",
				"3",
				"4",
				"5"
			],
			"enumNames": [
				"0: None",
				"1: Critical",
				"2: Error",
				"3: Warning",
				"4: Information",
				"5: Debug"
			]
		},
		"SchedulerType": {
			"type": "string",
			"enum": [
				"SCHED_NOOP",
				"SCHED_IORR",
				"SCHED_BVT",
				"SCHED_PRIO"
			]
		},
		"PriorityType": {
			"type": "string",
			"enum": [
				"PRIO_LOW",
				"PRIO_HIGH"
			]
		},
		"SerialConsoleType": {
			"type": "string",
			"pattern": "^.*ttyS[\\d]+$"
		},
		"SerialConsoleOptions": {
			"anyOf": [
				{
					"title": "None",
					"type": "string",
					"pattern": "^[*]{0}$"
				},
				{
					"title": "SerialConsoleType",
					"type": "string",
					"pattern": "^.*ttyS[\\d]+$"
				}
			]
		},
		"VMNameType": {
			"type": "string",
			"pattern": "^([a-zA-Z0-9_\\-]){1,15}$"
		},
		"VBDFType": {
			"type": "string",
			"pattern": "^[0-9A-Fa-f]{1,2}:[0-1][0-9A-Fa-f].[0-7]$"
		},
		"ProviderType": {
			"type": "string",
			"enum": [
				"Hypervisor",
				"Device Model"
			]
		},
		"IVSHMEMSize": {
			"type": "integer",
			"enum": [
				2,
				4,
				8,
				16,
				32,
				64,
				128,
				256,
				512
			]
		},
		"LoadOrderType": {
			"type": "string",
			"enum": [
				"SERVICE_VM",
				"PRE_LAUNCHED_VM",
				"POST_LAUNCHED_VM"
			]
		},
		"VMType": {
			"type": "string",
			"enum": [
				"RTVM",
				"STANDARD_VM",
				"TEE_VM",
				"REE_VM"
			]
		},
		"VMKernelType": {
			"type": "string",
			"enum": [
				"KERNEL_BZIMAGE",
				"KERNEL_RAWIMAGE",
				"KERNEL_ELF"
			]
		},
		"ConsoleVuartConfiguration": {
			"type": "string",
			"enum": [
				"None",
				"COM Port 1",
				"COM Port 2",
				"COM Port 3",
				"COM Port 4",
				"PCI"
			]
		},
		"VuartType": {
			"type": "string",
			"enum": [
				"legacy",
				"pci"
			]
		},
		"OSType": {
			"type": "string",
			"enum": [
				"Non-Windows OS",
				"Windows OS"
			]
		},
		"BasicVMType": {
			"type": "string",
			"enum": [
				"RTVM",
				"STANDARD_VM"
			]
		},
		"IVSHMEMVM": {
			"type": "object",
			"required": [
				"VM_NAME",
				"VBDF"
			],
			"properties": {
				"VM_NAME": {
					"$ref": "#/definitions/VMNameType",
					"title": "Shared VMS",
					"description": "<p>Name of the VM which use this IVSHMEM.</p>"
				},
				"VBDF": {
					"$ref": "#/definitions/VBDFType",
					"title": "VBDF",
					"description": "<dl class=\"simple\">\n<dt>Bus, Device and function of the virtual</dt>\n<dd><p>device in VM . Set in hex.</p>\n</dd>\n</dl>"
				}
			}
		},
		"IVSHMEMVMS": {
			"type": "object",
			"required": [
				"IVSHMEM_VM"
			],
			"properties": {
				"IVSHMEM_VM": {
					"items": {
						"$ref": "#/definitions/IVSHMEMVM"
					},
					"type": "array",
					"title": "IVSHMEM_VM",
					"description": "<p>Set each VM which use this IVSHMEM.</p>"
				}
			}
		},
		"IVSHMEMRegionType": {
			"type": "object",
			"required": [
				"NAME",
				"PROVIDED_BY",
				"IVSHMEM_SIZE",
				"IVSHMEM_VMS"
			],
			"properties": {
				"NAME": {
					"type": "string",
					"pattern": "^\\w+$",
					"title": "Name",
					"description": "<p>Name of the shared memory region.</p>"
				},
				"PROVIDED_BY": {
					"$ref": "#/definitions/ProviderType",
					"default": "Hypervisor",
					"title": "Emulated by",
					"description": "<p>Whether the shared memory region is emulated by the hypervisor or Device Model.</p>"
				},
				"IVSHMEM_SIZE": {
					"$ref": "#/definitions/IVSHMEMSize",
					"default": 2,
					"title": "Size (MB)",
					"description": "<dl class=\"simple\">\n<dt>Select the size of the shared memory region</dt>\n<dd><p>in megabytes. The value should be a power of 2\nand no more than 512.</p>\n</dd>\n</dl>"
				},
				"IVSHMEM_VMS": {
					"$ref": "#/definitions/IVSHMEMVMS",
					"title": "Shared VMs",
					"description": "<p>Select all VMs that use the shared memory region.</p>"
				}
			}
		},
		"IVSHMEMInfo": {
			"type": "object",
			"properties": {
				"IVSHMEM_REGION": {
					"items": {
						"$ref": "#/definitions/IVSHMEMRegionType"
					},
					"type": "array",
					"title": "IVSHMEM_REGION",
					"description": "<p>Set a inter-VM shared memory.</p>"
				}
			}
		},
		"RDTType": {
			"type": "object",
			"required": [
				"RDT_ENABLED",
				"CDP_ENABLED",
				"VCAT_ENABLED"
			],
			"properties": {
				"RDT_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Intel Resource Director Technology",
					"description": "<dl class=\"simple\">\n<dt>Enable the Intel Resource Director Technology (RDT)</dt>\n<dd><p>allocation feature. If the board hardware does not support\nRDT, setting this option to <span class=\"docutils literal\">y</span> is ignored.</p>\n</dd>\n</dl>"
				},
				"CDP_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Code and Data Prioritization",
					"description": "<dl class=\"simple\">\n<dt>Enable Code and Data Prioritization (CDP). CDP provides control over code and data</dt>\n<dd><p>placement in cache to improve an application's real-time performance.</p>\n</dd>\n</dl>"
				},
				"VCAT_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "VCAT_ENABLED",
					"description": "<dl class=\"simple\">\n<dt>Enable virtualization of the Cache Allocation Technology (CAT) feature in RDT. CAT</dt>\n<dd><p>enables you to allocate cache to VMs, providing isolation to avoid performance interference from\nother VMs.</p>\n</dd>\n</dl>"
				},
				"CLOS_MASK": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"title": "CLOS_MASK",
					"description": "<dl class=\"simple\">\n<dt>Specify the cache capacity bitmask for the CLOS; only continuous '1' bits</dt>\n<dd><p>are allowed. The value will be ignored when hardware does not support RDT.\nThis option takes effect only if <a class=\"reference external\" href=\"https://projectacrn.github.io/latest/reference/config-options.html#cmdoption-arg-hv.FEATURES.RDT.RDT_ENABLED\" target=\"_blank\">hv.FEATURES.RDT.RDT_ENABLED</a> is set to <span class=\"docutils literal\">y</span>.\nAs <a class=\"reference external\" href=\"https://projectacrn.github.io/latest/reference/config-options.html#cmdoption-arg-vm.clos.vcpu_clos\" target=\"_blank\">vm.clos.vcpu_clos</a> specifies the index of the CLOS to be associated with the given\nvCPU,\n<a class=\"reference external\" href=\"https://projectacrn.github.io/latest/reference/config-options.html#cmdoption-arg-hv.FEATURES.RDT.CLOS_MASK\" target=\"_blank\">hv.FEATURES.RDT.CLOS_MASK</a> of that CLOS would impact the performance of the given vCPU.</p>\n</dd>\n</dl>"
				},
				"MBA_DELAY": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"title": "MBA_DELAY",
					"description": "<p>Memory Bandwidth Allocation delay value.</p>"
				}
			}
		},
		"SSRAMInfo": {
			"type": "object",
			"required": [
				"SSRAM_ENABLED"
			],
			"properties": {
				"SSRAM_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Software SRAM (for real-time apps)",
					"description": "<dl class=\"simple\">\n<dt>Enable Software SRAM. This feature reserves memory buffers as always-cached memory</dt>\n<dd><p>to improve an application's real-time performance.</p>\n</dd>\n</dl>"
				}
			}
		},
		"CPUAffinityConfiguration": {
			"type": "object",
			"required": [
				"pcpu_id"
			],
			"properties": {
				"pcpu_id": {
					"type": "array",
					"items": {
						"type": "integer",
						"default": 2
					},
					"title": "pcpu_id",
					"description": "<dl class=\"simple\">\n<dt>A pCPU that this VM's vCPU is allowed to pin</dt>\n<dd><p>to.</p>\n</dd>\n</dl>"
				}
			}
		},
		"CLOSConfiguration": {
			"type": "object",
			"required": [
				"vcpu_clos"
			],
			"properties": {
				"vcpu_clos": {
					"type": "array",
					"items": {
						"type": "integer",
						"default": 0
					},
					"title": "vcpu_clos",
					"description": "<dl>\n<dt>By default (<span class=\"docutils literal\">virtual_cat_support</span> is not specified):</dt>\n<dd><p>vcpu_clos is per-CPU and it configures each CPU in VMs to a desired CLOS ID in the <span class=\"docutils literal\">VM</span>\nsection of the\nscenario file. Follow <a class=\"reference external\" href=\"https://projectacrn.github.io/latest/tutorials/rdt_configuration.html#rdt-detection-capabilities\" target=\"_blank\">RDT Detection and Resource Capabilities</a> to identify the maximum supported CLOS\nID that can be used.</p>\n<p>If <span class=\"docutils literal\">virtual_cat_support</span> is specified:\nvcpu_clos is not per-CPU anymore, just a list of physical CLOSIDs (minimum 2) that are assigned\nto VMs\nfor vCAT use. Each vcpu_clos will be mapped to a virtual CLOSID, the first vcpu_clos is mapped\nto virtual\nCLOSID 0 and the second is mapped to virtual CLOSID 1, etc.</p>\n</dd>\n</dl>"
				}
			}
		},
		"EPCSection": {
			"type": "object",
			"required": [
				"base",
				"size"
			],
			"properties": {
				"base": {
					"$ref": "#/definitions/HexFormat",
					"default": 0,
					"title": "Intel Software Guard Extensions (SGX) EPC section base",
					"description": "<dl class=\"simple\">\n<dt>Specify the enclave page cache (EPC) section base for Intel Software Guard</dt>\n<dd><p>Extensions (SGX). Must be page aligned.</p>\n</dd>\n</dl>"
				},
				"size": {
					"$ref": "#/definitions/HexFormat",
					"default": 0,
					"title": "Intel Software Guard Extensions (SGX) EPC section size (bytes)",
					"description": "<dl class=\"simple\">\n<dt>Specify the enclave page cache (EPC) section size in bytes for Intel Software</dt>\n<dd><p>Guard Extensions (SGX). Must be page aligned.</p>\n</dd>\n</dl>"
				}
			}
		},
		"MemoryInfo": {
			"type": "object",
			"required": [
				"whole",
				"start_hpa"
			],
			"properties": {
				"whole": {
					"type": "integer",
					"default": 256,
					"title": "VM physical memory allocation (MB)",
					"description": "<p>Specify the physical memory allocated to this VM in Megabytes.</p>"
				},
				"start_hpa": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x100000000",
					"title": "start_hpa",
					"description": "<p>The starting physical address in host for the VM.</p>"
				},
				"size": {
					"$ref": "#/definitions/MemorySizeType",
					"default": "0x20000000",
					"title": "size",
					"description": "<p>The memory size in bytes for the VM. Default value is <span class=\"docutils literal\">0x200000000</span>.</p>"
				},
				"start_hpa2": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x0",
					"title": "start_hpa2",
					"description": "<p>Start of second HPA for non-contiguous allocations in host for the VM.</p>"
				},
				"size_hpa2": {
					"$ref": "#/definitions/MemorySizeType",
					"default": "0x0",
					"title": "size_hpa2",
					"description": "<p>Memory size of second HPA for non-contiguous allocations in Bytes for the VM.</p>"
				}
			}
		},
		"OSConfigurations": {
			"type": "object",
			"required": [
				"kern_type",
				"kern_mod"
			],
			"properties": {
				"kern_type": {
					"$ref": "#/definitions/VMKernelType",
					"title": "Kernel image type",
					"description": "<p>Select the kernel image type so that the hypervisor can load it correctly.</p>"
				},
				"kern_mod": {
					"type": "string",
					"title": "Kernel module tag",
					"description": "<dl class=\"simple\">\n<dt>Specify the tag for the kernel image that is used as a multiboot module. The tag's</dt>\n<dd><p>spelling must exactly match the module tag in the GRUB multiboot cmdline.</p>\n</dd>\n</dl>"
				},
				"ramdisk_mod": {
					"type": "string",
					"title": "RAMdisk module tag",
					"description": "<dl class=\"simple\">\n<dt>Specify the tag for the RAMdisk image that is used as a multiboot module. The</dt>\n<dd><p>tag's spelling must exactly match the module tag in the GRUB multiboot cmdline.</p>\n</dd>\n</dl>"
				},
				"bootargs": {
					"type": "string",
					"title": "Kernel command-line parameters",
					"description": "<dl class=\"simple\">\n<dt>Specify the command-line parameters that will be used to boot the kernel for this</dt>\n<dd><p>VM. See <a class=\"reference external\" href=\"https://www.kernel.org/doc/html/latest/admin-guide/kernel-parameters.html\" target=\"_blank\">Linux documentation</a>\nfor a list of parameters.</p>\n</dd>\n</dl>"
				},
				"kern_load_addr": {
					"$ref": "#/definitions/KernLoadAddr",
					"title": "kern_load_addr",
					"description": "<p>The loading address in host memory for the VM kernel.</p>"
				},
				"kern_entry_addr": {
					"$ref": "#/definitions/KernEntryAddr",
					"title": "kern_entry_addr",
					"description": "<p>The entry address in host memory for the VM kernel.</p>"
				}
			}
		},
		"VuartEndpointType": {
			"type": "object",
			"required": [
				"vm_name",
				"io_port"
			],
			"properties": {
				"vm_name": {
					"type": "string",
					"title": "Virtual UART port",
					"description": "<p>Virtual UART port</p>"
				},
				"io_port": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x3F",
					"title": "Virtual I/O address",
					"description": "<p>Virtual I/O address</p>"
				},
				"vbdf": {
					"items": {
						"$ref": "#/definitions/VBDFType"
					},
					"type": "array",
					"maxItems": 1
				}
			}
		},
		"VuartConnectionType": {
			"type": "object",
			"required": [
				"name",
				"type",
				"endpoint"
			],
			"properties": {
				"name": {
					"type": "string"
				},
				"type": {
					"$ref": "#/definitions/VuartType",
					"default": "legacy"
				},
				"endpoint": {
					"minItems": 2,
					"items": {
						"$ref": "#/definitions/VuartEndpointType"
					},
					"type": "array",
					"maxItems": 2
				}
			}
		},
		"VuartConnectionsType": {
			"type": "object",
			"properties": {
				"vuart_connection": {
					"items": {
						"$ref": "#/definitions/VuartConnectionType"
					},
					"type": "array"
				}
			}
		},
		"MMIOResourcesConfiguration": {
			"type": "object",
			"properties": {
				"TPM2": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Trusted platform module (TPM2) passthrough",
					"description": "<p>Pass through the trusted platform module (TPM2) device to this VM.</p>"
				},
				"p2sb": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Primary-to-Sideband bridge passthrough",
					"description": "<dl class=\"simple\">\n<dt>Pass through the Primary-to-Sideband (P2SB) bridge register access BAR to this</dt>\n<dd><p>VM.</p>\n</dd>\n</dl>"
				}
			}
		},
		"PCIDevsConfiguration": {
			"type": "object",
			"properties": {
				"pci_dev": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"title": "PCI device assignment",
					"description": "<p>Select the PCI devices you want to assign to this virtual machine.</p>",
					"enum": {
						"type": "dynamicEnum",
						"function": "get_enum",
						"source": "board_xml",
						"selector": "//device[class]/@description",
						"sorted": "lambda s: (s.split(' ', maxsplit=1)[-1].split(':')[0], s.split(' ')[0])"
					}
				}
			}
		},
		"DebugOptionsType": {
			"type": "object",
			"required": [
				"BUILD_TYPE",
				"SERIAL_CONSOLE",
				"MEM_LOGLEVEL",
				"NPK_LOGLEVEL",
				"CONSOLE_LOGLEVEL"
			],
			"properties": {
				"BUILD_TYPE": {
					"$ref": "#/definitions/BuildType",
					"default": "debug",
					"title": "Build type",
					"description": "<dl class=\"simple\">\n<dt>Select the build type. Debug mode enables debug shell, prints, and logs. Release</dt>\n<dd><p>mode optimizes the ACRN binary for deployment and turns off all debug infrastructure. These\nsettings can only be changed at build time.</p>\n</dd>\n</dl>"
				},
				"SERIAL_CONSOLE": {
					"$ref": "#/definitions/SerialConsoleOptions",
					"title": "Serial console port",
					"description": "<p>Select the host serial device used for hypervisor debugging.</p>",
					"enum": {
						"type": "dynamicEnum",
						"function": "get_enum",
						"source": "board_xml",
						"selector": "//ttys/serial[type != '0']/dev_path/text()",
						"sorted": null
					}
				},
				"MEM_LOGLEVEL": {
					"$ref": "#/definitions/LogLevelType",
					"default": 0,
					"title": "ACRN log level",
					"description": "<dl class=\"simple\">\n<dt>Select the default log level for log messages stored in memory. Value can be</dt>\n<dd><p>changed at runtime. Log messages with the selected value or lower are displayed.</p>\n</dd>\n</dl>"
				},
				"NPK_LOGLEVEL": {
					"$ref": "#/definitions/LogLevelType",
					"default": 0,
					"title": "Intel Trace Hub log level",
					"description": "<dl class=\"simple\">\n<dt>Select the default log level for the hypervisor via Intel Trace Hub log. Use the</dt>\n<dd><p>Intel Trace Hub's memory to record log messages. Value can be changed at runtime. Log messages\nwith the selected value or lower are displayed.</p>\n</dd>\n</dl>"
				},
				"CONSOLE_LOGLEVEL": {
					"$ref": "#/definitions/LogLevelType",
					"default": 0,
					"title": "Serial console log level",
					"description": "<dl class=\"simple\">\n<dt>Select the default log level for log messages written to the serial console. Log</dt>\n<dd><p>messages with the selected value or lower are displayed.</p>\n</dd>\n</dl>"
				}
			}
		},
		"FeatureOptionsType": {
			"type": "object",
			"required": [
				"RELOC",
				"SCHEDULER",
				"MULTIBOOT2",
				"ENFORCE_TURNOFF_AC",
				"ENFORCE_TURNOFF_GP",
				"SECURITY_VM_FIXUP",
				"KEEP_IRQ_DISABLED",
				"RDT",
				"HYPERV_ENABLED",
				"IOMMU_ENFORCE_SNP",
				"ACPI_PARSE_ENABLED",
				"L1D_VMENTRY_ENABLED",
				"MCE_ON_PSC_DISABLED",
				"IVSHMEM"
			],
			"properties": {
				"RELOC": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Hypervisor relocation in memory",
					"description": "<dl class=\"simple\">\n<dt>Enable hypervisor relocation in memory. The bootloader may need to change the</dt>\n<dd><p>location of the hypervisor because of other firmware.</p>\n</dd>\n</dl>"
				},
				"SCHEDULER": {
					"$ref": "#/definitions/SchedulerType",
					"default": "SCHED_BVT",
					"title": "Virtual CPU scheduler",
					"description": "<dl class=\"simple\">\n<dt>Select the scheduling algorithm used to determine which User VM runs on a shared</dt>\n<dd><p>virtual CPU.</p>\n</dd>\n</dl>"
				},
				"MULTIBOOT2": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Multiboot2",
					"description": "<dl class=\"simple\">\n<dt>Enable multiboot2 protocol support and multiboot1 downward compatibility. Disable</dt>\n<dd><p>this feature if multiboot1 meets your requirements and to reduce lines of code.</p>\n</dd>\n</dl>"
				},
				"ENFORCE_TURNOFF_AC": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Split lock detection",
					"description": "<dl class=\"simple\">\n<dt>Enable detection of split locks, which can negatively affect an application's</dt>\n<dd><p>real-time performance. If a lock is detected, an alignment check exception #AC occurs.</p>\n</dd>\n</dl>"
				},
				"ENFORCE_TURNOFF_GP": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Uncacheable-memory lock detection",
					"description": "<dl class=\"simple\">\n<dt>Enable detection of uncacheable-memory locks, which can negatively affect an</dt>\n<dd><p>application's real-time performance. If a lock is detected, a general-protection exception #GP\noccurs.</p>\n</dd>\n</dl>"
				},
				"SECURITY_VM_FIXUP": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "SECURITY_VM_FIXUP",
					"description": "<dl class=\"simple\">\n<dt>Enable to do fixup for TPM2 and SMBIOS for Security VM. If no Security VM, setting</dt>\n<dd><p>this option to <span class=\"docutils literal\">n</span></p>\n</dd>\n</dl>"
				},
				"KEEP_IRQ_DISABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "KEEP_IRQ_DISABLED",
					"description": "<p>If <span class=\"docutils literal\">y</span>, permanently disables all interrupts in HV root mode.</p>"
				},
				"RDT": {
					"$ref": "#/definitions/RDTType",
					"title": "Intel Resource Director Technology (RDT)",
					"description": "<dl class=\"simple\">\n<dt>Intel Resource Director Technology (RDT) provides cache and memory bandwidth</dt>\n<dd><p>allocation features. The features can be used to improve an application's real-time performance.</p>\n</dd>\n</dl>"
				},
				"HYPERV_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Hyper-V virtualization technology",
					"description": "<dl class=\"simple\">\n<dt>Enable Microsoft Hyper-V Hypervisor Top-Level Functional Specification (TFLS) for</dt>\n<dd><p>Windows User VMs.</p>\n</dd>\n</dl>"
				},
				"IOMMU_ENFORCE_SNP": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "IOMMU_ENFORCE_SNP",
					"description": "<p>Specify if the IOMMU enforces snoop behavior of DMA operations.</p>"
				},
				"ACPI_PARSE_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Parse ACPI tables at runtime",
					"description": "<dl class=\"simple\">\n<dt>Enable ACPI runtime parsing to get DMAR (DMA remapping) configuration data from</dt>\n<dd><p>the APCI tables. Otherwise, use existing, static information from the associated board\nconfiguration file.</p>\n</dd>\n</dl>"
				},
				"L1D_VMENTRY_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Mitigate L1 terminal fault",
					"description": "<dl class=\"simple\">\n<dt>Enable L1 cache flush before VM entry to prevent L1 terminal fault. L1 terminal</dt>\n<dd><p>fault is a hardware vulnerability that allows unauthorized disclosure of information residing in\nthe L1 data cache.</p>\n</dd>\n</dl>"
				},
				"MCE_ON_PSC_DISABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Machine Check Error (MCE) workaround",
					"description": "<dl class=\"simple\">\n<dt>Enable the software workaround for Machine Check Error on Page Size Change</dt>\n<dd><p>(hardware bug in some processor families).</p>\n</dd>\n</dl>"
				},
				"IVSHMEM": {
					"$ref": "#/definitions/IVSHMEMInfo",
					"title": "Inter-VM shared memory",
					"description": ""
				},
				"SSRAM": {
					"$ref": "#/definitions/SSRAMInfo",
					"title": "Software SRAM (for real-time apps)",
					"description": ""
				}
			}
		},
		"MemoryOptionsType": {
			"type": "object",
			"required": [
				"STACK_SIZE",
				"HV_RAM_START"
			],
			"properties": {
				"STACK_SIZE": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x2000",
					"title": "CPU memory stack size (bytes per CPU)",
					"description": "<dl class=\"simple\">\n<dt>Specify the size of the memory stack in bytes for each physical CPU. For example,</dt>\n<dd><p>if you specify 8 kilobytes, each CPU will get its own 8-kilobyte stack.</p>\n</dd>\n</dl>"
				},
				"HV_RAM_START": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x00400000",
					"title": "HV_RAM_START",
					"description": "<dl class=\"simple\">\n<dt>The 2MB-aligned starting physical address of the RAM region used by the</dt>\n<dd><p>hypervisor.</p>\n</dd>\n</dl>"
				}
			}
		},
		"CapacitiesOptionsType": {
			"type": "object",
			"required": [
				"MAX_VM_NUM",
				"MAX_IOAPIC_NUM",
				"MAX_PCI_DEV_NUM",
				"MAX_IOAPIC_LINES",
				"MAX_PT_IRQ_ENTRIES",
				"MAX_MSIX_TABLE_NUM",
				"MAX_EMULATED_MMIO"
			],
			"properties": {
				"MAX_VM_NUM": {
					"type": "integer",
					"default": 16,
					"title": "MAX_VM_NUM",
					"description": "<p>Maximum number of User VMs allowed.</p>"
				},
				"MAX_IOAPIC_NUM": {
					"type": "integer",
					"minimum": 1,
					"maximum": 10,
					"default": 1,
					"title": "MAX_IOAPIC_NUM",
					"description": "<p>Maximum number of IOAPICs.</p>"
				},
				"MAX_PCI_DEV_NUM": {
					"type": "integer",
					"minimum": 1,
					"maximum": 1024,
					"default": 96,
					"title": "Maximum number of PCI devices",
					"description": "<dl class=\"simple\">\n<dt>Specify the maximum number of PCI devices. This impacts the amount of memory used</dt>\n<dd><p>to maintain information about these PCI devices. The default value is calculated from the board\nconfiguration file. If you have PCI devices that were not detected by the Board Inspector, you\nmay need to change this maximum value.</p>\n</dd>\n</dl>"
				},
				"MAX_IOAPIC_LINES": {
					"type": "integer",
					"minimum": 1,
					"maximum": 120,
					"default": 120,
					"title": "MAX_IOAPIC_LINES",
					"description": "<p>Maximum number of interrupt lines per IOAPIC.</p>"
				},
				"MAX_PT_IRQ_ENTRIES": {
					"type": "integer",
					"default": 256,
					"title": "Maximum number of IRQ entries for passthrough devices",
					"description": "<dl class=\"simple\">\n<dt>Specify the maximum number of interrupt request (IRQ) entries from all passthrough</dt>\n<dd><p>devices.</p>\n</dd>\n</dl>"
				},
				"MAX_MSIX_TABLE_NUM": {
					"type": "integer",
					"minimum": 1,
					"maximum": 2048,
					"default": 64,
					"title": "Maximum number of MSI-X tables per device",
					"description": "<dl class=\"simple\">\n<dt>Specify the maximum number of Message Signaled Interrupt MSI-X tables per device.</dt>\n<dd><p>The default value is calculated from the board configuration file.</p>\n</dd>\n</dl>"
				},
				"MAX_EMULATED_MMIO": {
					"type": "integer",
					"minimum": 1,
					"maximum": 128,
					"default": 16,
					"title": "Maximum number of emulated MMIO regions",
					"description": "<dl class=\"simple\">\n<dt>Specify the maximum number of emulated MMIO regions for device virtualization. The</dt>\n<dd><p>default value is calculated from the board configuration file.</p>\n</dd>\n</dl>"
				}
			}
		},
		"MiscCfgOptionsType": {
			"type": "object",
			"required": [
				"GPU_SBDF"
			],
			"properties": {
				"GPU_SBDF": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x00000010",
					"title": "GPU_SBDF",
					"description": "<p>Segment, Bus, Device, and function of the GPU.</p>"
				}
			}
		},
		"HVConfigType": {
			"type": "object",
			"required": [
				"DEBUG_OPTIONS",
				"FEATURES",
				"MEMORY",
				"CAPACITIES",
				"MISC_CFG",
				"vuart_connections"
			],
			"properties": {
				"DEBUG_OPTIONS": {
					"$ref": "#/definitions/DebugOptionsType",
					"title": "Debug options",
					"description": "<p>Configure the debug facilities.</p>"
				},
				"FEATURES": {
					"$ref": "#/definitions/FeatureOptionsType",
					"title": "Hypervisor features",
					"description": "<p>Enable hypervisor features.</p>"
				},
				"MEMORY": {
					"$ref": "#/definitions/MemoryOptionsType",
					"title": "Memory options",
					"description": "<p>Configure memory used by the hypervisor.</p>"
				},
				"CAPACITIES": {
					"$ref": "#/definitions/CapacitiesOptionsType",
					"title": "Hypervisor capacities",
					"description": "<p>Configure the capacities of the hypervisor.</p>"
				},
				"MISC_CFG": {
					"$ref": "#/definitions/MiscCfgOptionsType",
					"title": "MISC_CFG",
					"description": "<p>Miscellaneous options for workarounds.</p>"
				},
				"vuart_connections": {
					"$ref": "#/definitions/VuartConnectionsType",
					"title": "Virtual UART connection",
					"description": "<dl class=\"simple\">\n<dt>Specify the vUART connection settings.</dt>\n<dd><p>Refer to <a class=\"reference external\" href=\"https://projectacrn.github.io/latest/tutorials/vuart_configuration.html#vuart-config\" target=\"_blank\">Enable vUART Configurations</a> for detailed vUART settings.</p>\n</dd>\n</dl>"
				}
			}
		},
		"VMConfigType": {
			"type": "object",
			"required": [
				"load_order",
				"vm_type",
				"name",
				"clos",
				"memory",
				"priority",
				"companion_vmid",
				"console_vuart",
				"os_type",
				"vbootloader",
				"vuart0",
				"virtio_devices"
			],
			"properties": {
				"load_order": {
					"$ref": "#/definitions/LoadOrderType",
					"title": "Load order",
					"description": "<p>Specify the load_order.</p>"
				},
				"vm_type": {
					"$ref": "#/definitions/VMType",
					"title": "VM type",
					"description": "<dl class=\"simple\">\n<dt>Select the VM type. A standard VM (<span class=\"docutils literal\">STANDARD_VM</span>) is for general-purpose</dt>\n<dd><p>applications, such as human-machine interface (HMI). A real-time VM (<span class=\"docutils literal\">RTVM</span>) offers special\nfeatures for time-sensitive applications.</p>\n</dd>\n</dl>"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 15,
					"pattern": "^\\S+$",
					"title": "VM name",
					"description": "<dl class=\"simple\">\n<dt>Specify the name used to identify this VM. The VM name will be shown in the</dt>\n<dd><p>hypervisor console vm_list command.</p>\n</dd>\n</dl>"
				},
				"lapic_passthrough": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "LAPIC passthrough",
					"description": "<dl class=\"simple\">\n<dt>Enable LAPIC passthrough for this VM. This feature is required for VMs with</dt>\n<dd><p>stringent real-time performance needs.</p>\n</dd>\n</dl>"
				},
				"io_completion_polling": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "I/O completion polling",
					"description": "<dl class=\"simple\">\n<dt>Enable polling mode for I/O completion for this VM. This feature is required for</dt>\n<dd><p>VMs with stringent real-time performance needs.</p>\n</dd>\n</dl>"
				},
				"nested_virtualization_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Nested virtualization",
					"description": "<p>Enable nested virtualization for KVM.</p>"
				},
				"virtual_cat_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Virtual Cache Allocation Technology (vCAT)",
					"description": "<dl class=\"simple\">\n<dt>Enable virtualization of the Cache Allocation Technology (CAT) feature in RDT. CAT</dt>\n<dd><p>enables you to allocate cache to VMs, providing isolation to avoid performance interference from\nother VMs.</p>\n</dd>\n</dl>"
				},
				"secure_world_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "secure_world_support",
					"description": "<p>Specify secure world support for trustry OS.</p>"
				},
				"hide_mtrr_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "hide_mtrr_support",
					"description": "<p>Specify MTRR capability to hide for VM.</p>"
				},
				"security_vm": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "security_vm",
					"description": "<p>Specify TPM2 FIXUP for VM.</p>"
				},
				"cpu_affinity": {
					"$ref": "#/definitions/CPUAffinityConfiguration",
					"title": "Physical CPU affinity",
					"description": "<dl class=\"simple\">\n<dt>Select a subset of physical CPUs that this VM can use. More than one can be</dt>\n<dd><p>selected.</p>\n</dd>\n</dl>"
				},
				"clos": {
					"$ref": "#/definitions/CLOSConfiguration",
					"title": "clos",
					"description": "<dl class=\"simple\">\n<dt>Class of Service for Cache Allocation Technology.</dt>\n<dd><p>Refer SDM 17.19.2 for details, and use with caution.</p>\n</dd>\n</dl>"
				},
				"epc_section": {
					"$ref": "#/definitions/EPCSection",
					"title": "epc_section",
					"description": "<dl class=\"simple\">\n<dt>Specify the Intel Software Guard Extensions (SGX) enclave page cache (EPC) section</dt>\n<dd><p>settings.</p>\n</dd>\n</dl>"
				},
				"memory": {
					"$ref": "#/definitions/MemoryInfo",
					"title": "memory",
					"description": "<p>Specify memory information for Service and User VMs.</p>"
				},
				"priority": {
					"$ref": "#/definitions/PriorityType",
					"default": "PRIO_LOW",
					"title": "priority",
					"description": "<p>Specify the VM vCPU priority for scheduling.</p>"
				},
				"companion_vmid": {
					"type": "integer",
					"default": 65535,
					"title": "companion_vmid",
					"description": "<p>Specify the companion VM id of this VM.</p>"
				},
				"os_config": {
					"$ref": "#/definitions/OSConfigurations",
					"title": "os_config",
					"description": "<dl class=\"simple\">\n<dt>General information for host kernel, boot</dt>\n<dd><p>argument and memory.</p>\n</dd>\n</dl>"
				},
				"console_vuart": {
					"$ref": "#/definitions/ConsoleVuartConfiguration",
					"default": "None",
					"title": "Console virtual UART type",
					"description": "<dl class=\"simple\">\n<dt>Select the console virtual UART (vUART) type. Add the console settings to the</dt>\n<dd><p>kernel command line by typing them in the \"Linux kernel command-line parameters\" text box (for\nexample, console=ttyS0 for COM port 1).</p>\n</dd>\n</dl>"
				},
				"mmio_resources": {
					"$ref": "#/definitions/MMIOResourcesConfiguration",
					"title": "mmio_resources",
					"description": "<p>MMIO resources to passthrough.</p>"
				},
				"pt_intx": {
					"type": "string",
					"title": "pt_intx",
					"description": "<dl class=\"simple\">\n<dt>Specify the pre-launched VM owned IOAPIC pins and the corresponding mapping</dt>\n<dd><p>between physical GSI and virtual GSI.</p>\n</dd>\n</dl>"
				},
				"pci_devs": {
					"$ref": "#/definitions/PCIDevsConfiguration",
					"title": "PCI device assignment",
					"description": ""
				},
				"PTM": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Precision Time Measurement",
					"description": "<dl class=\"simple\">\n<dt>Enable virtualization of PCIe Precision Time Measurement (PTM) mechanism for</dt>\n<dd><p>devices with PTM capability and for real-time application. The hypervisor provides PCIe root\nport emulation instead of host bridge emulation for the VM. PTM coordinates timing between the\ndevice and root port with the device's local timebases without relying on software.</p>\n</dd>\n</dl>"
				},
				"os_type": {
					"$ref": "#/definitions/OSType",
					"default": "Non-Windows OS",
					"title": "OS type",
					"description": "<dl class=\"simple\">\n<dt>Select the OS type for this VM. This is required to run Windows in a User VM. See</dt>\n<dd><p><a class=\"reference external\" href=\"https://projectacrn.github.io/latest/user-guides/acrn-dm-parameters.html#acrn-dm-parameters\" target=\"_blank\">Device Model Parameters</a> for how to include this in the Device Model arguments.</p>\n</dd>\n</dl>"
				},
				"vbootloader": {
					"$ref": "#/definitions/EnablementType",
					"default": "Enable",
					"title": "OVMF (Open Virtual Machine Firmware)",
					"description": "<p>Use virtual bootloader OVMF (Open Virtual Machine Firmware) to boot this VM.</p>"
				},
				"vuart0": {
					"$ref": "#/definitions/EnablementType",
					"default": "Enable",
					"title": "Emulate COM1 as stdio I/O in Device Model",
					"description": "<dl class=\"simple\">\n<dt>Enable the ACRN Device Model to emulate COM1 as a User VM stdio I/O. Hypervisor</dt>\n<dd><p>global emulation will take priority over this VM setting.</p>\n</dd>\n</dl>"
				},
				"usb_xhci": {
					"type": "string",
					"pattern": "^([\\d]+-[\\d]+){0,1}(:[\\d]+-[\\d]+)*$",
					"title": "Virtual USB host controller interface",
					"description": "<dl class=\"simple\">\n<dt>Select the USB physical bus and port number that will be emulated by the ACRN</dt>\n<dd><p>Device Model for this VM. USB 3.0, 2.0, and 1.0 are supported.</p>\n</dd>\n</dl>"
				},
				"virtio_devices": {
					"type": "object",
					"properties": {
						"console": {
							"type": "string",
							"title": "console",
							"description": "<dl class=\"simple\">\n<dt>The virtio console device setting.Input format:</dt>\n<dd><p><span class=\"docutils literal\"><span class=\"pre\">[@]stdio|tty|pty|sock:portname[=portpath][,[@]stdio|tty|pty:portname[=portpath]]</span></span></p>\n</dd>\n</dl>"
						},
						"network": {
							"type": "string",
							"title": "network",
							"description": "<dl class=\"simple\">\n<dt>The virtio network device setting.</dt>\n<dd><p>Input format: <span class=\"docutils literal\"><span class=\"pre\">device_name[,vhost][,mac=XX:XX:XX:XX:XX:XX]</span></span>.\nThe <span class=\"docutils literal\">device_name</span> is the name of the TAP (or MacVTap) device.\nIt must include the keyword <span class=\"docutils literal\">tap</span>. <span class=\"docutils literal\">vhost</span> specifies the\nvhost backend; otherwise, the VBSU backend is used. The <span class=\"docutils literal\">mac</span>\naddress is optional.</p>\n</dd>\n</dl>"
						},
						"input": {
							"type": "string",
							"title": "input",
							"description": "<p>The virtio input device setting.</p>"
						},
						"block": {
							"type": "string",
							"title": "block",
							"description": "<dl class=\"simple\">\n<dt>The virtio block device setting.</dt>\n<dd><p>Format: [blk partition:][img path] e.g.: /dev/sda3:./a/b.img</p>\n</dd>\n</dl>"
						}
					},
					"title": "Virt-IO devices",
					"description": "<p>Enable virt-IO devices in post-launched VMs.</p>"
				}
			}
		},
		"ACRNConfigType": {
			"type": "object",
			"required": [
				"hv"
			],
			"properties": {
				"hv": {
					"$ref": "#/definitions/HVConfigType",
					"title": "hv",
					"description": "<dl class=\"simple\">\n<dt>The hypervisor configuration defines a working scenario and target</dt>\n<dd><p>board by configuring the hypervisor image features and capabilities such as\nsetting up the log and the serial port.</p>\n</dd>\n</dl>"
				}
			}
		},
		"PreLaunchedMemoryInfo": {
			"type": "object",
			"required": [
				"start_hpa"
			],
			"properties": {
				"start_hpa": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x100000000",
					"title": "start_hpa",
					"description": "<p>The starting physical address in host for the VM.</p>"
				},
				"size": {
					"$ref": "#/definitions/MemorySizeType",
					"default": "0x20000000",
					"title": "size",
					"description": "<p>The memory size in bytes for the VM. Default value is <span class=\"docutils literal\">0x200000000</span>.</p>"
				},
				"start_hpa2": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x0",
					"title": "start_hpa2",
					"description": "<p>Start of second HPA for non-contiguous allocations in host for the VM.</p>"
				},
				"size_hpa2": {
					"$ref": "#/definitions/MemorySizeType",
					"default": "0x0",
					"title": "size_hpa2",
					"description": "<p>Memory size of second HPA for non-contiguous allocations in Bytes for the VM.</p>"
				}
			}
		},
		"PreLaunchedVMConfigType": {
			"type": "object",
			"required": [
				"load_order",
				"vm_type",
				"name",
				"clos",
				"memory",
				"priority",
				"companion_vmid",
				"console_vuart"
			],
			"properties": {
				"load_order": {
					"$ref": "#/definitions/LoadOrderType",
					"title": "Load order",
					"description": "<p>Specify the load_order.</p>"
				},
				"vm_type": {
					"$ref": "#/definitions/VMType",
					"title": "VM type",
					"description": "<dl class=\"simple\">\n<dt>Select the VM type. A standard VM (<span class=\"docutils literal\">STANDARD_VM</span>) is for general-purpose</dt>\n<dd><p>applications, such as human-machine interface (HMI). A real-time VM (<span class=\"docutils literal\">RTVM</span>) offers special\nfeatures for time-sensitive applications.</p>\n</dd>\n</dl>"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 15,
					"pattern": "^\\S+$",
					"title": "VM name",
					"description": "<dl class=\"simple\">\n<dt>Specify the name used to identify this VM. The VM name will be shown in the</dt>\n<dd><p>hypervisor console vm_list command.</p>\n</dd>\n</dl>"
				},
				"lapic_passthrough": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "LAPIC passthrough",
					"description": "<dl class=\"simple\">\n<dt>Enable LAPIC passthrough for this VM. This feature is required for VMs with</dt>\n<dd><p>stringent real-time performance needs.</p>\n</dd>\n</dl>"
				},
				"io_completion_polling": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "I/O completion polling",
					"description": "<dl class=\"simple\">\n<dt>Enable polling mode for I/O completion for this VM. This feature is required for</dt>\n<dd><p>VMs with stringent real-time performance needs.</p>\n</dd>\n</dl>"
				},
				"nested_virtualization_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Nested virtualization",
					"description": "<p>Enable nested virtualization for KVM.</p>"
				},
				"virtual_cat_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Virtual Cache Allocation Technology (vCAT)",
					"description": "<dl class=\"simple\">\n<dt>Enable virtualization of the Cache Allocation Technology (CAT) feature in RDT. CAT</dt>\n<dd><p>enables you to allocate cache to VMs, providing isolation to avoid performance interference from\nother VMs.</p>\n</dd>\n</dl>"
				},
				"secure_world_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "secure_world_support",
					"description": "<p>Specify secure world support for trustry OS.</p>"
				},
				"hide_mtrr_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "hide_mtrr_support",
					"description": "<p>Specify MTRR capability to hide for VM.</p>"
				},
				"security_vm": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "security_vm",
					"description": "<p>Specify TPM2 FIXUP for VM.</p>"
				},
				"cpu_affinity": {
					"$ref": "#/definitions/CPUAffinityConfiguration",
					"title": "Physical CPU affinity",
					"description": "<dl class=\"simple\">\n<dt>Select a subset of physical CPUs that this VM can use. More than one can be</dt>\n<dd><p>selected.</p>\n</dd>\n</dl>"
				},
				"clos": {
					"$ref": "#/definitions/CLOSConfiguration",
					"title": "clos",
					"description": "<dl class=\"simple\">\n<dt>Class of Service for Cache Allocation Technology.</dt>\n<dd><p>Refer SDM 17.19.2 for details, and use with caution.</p>\n</dd>\n</dl>"
				},
				"epc_section": {
					"$ref": "#/definitions/EPCSection",
					"title": "epc_section",
					"description": "<dl class=\"simple\">\n<dt>Specify the Intel Software Guard Extensions (SGX) enclave page cache (EPC) section</dt>\n<dd><p>settings.</p>\n</dd>\n</dl>"
				},
				"memory": {
					"$ref": "#/definitions/PreLaunchedMemoryInfo",
					"title": "memory",
					"description": "<p>Specify memory information for Service and User VMs.</p>"
				},
				"priority": {
					"$ref": "#/definitions/PriorityType",
					"default": "PRIO_LOW",
					"title": "priority",
					"description": "<p>Specify the VM vCPU priority for scheduling.</p>"
				},
				"companion_vmid": {
					"type": "integer",
					"default": 65535,
					"title": "companion_vmid",
					"description": "<p>Specify the companion VM id of this VM.</p>"
				},
				"os_config": {
					"$ref": "#/definitions/OSConfigurations",
					"title": "os_config",
					"description": "<dl class=\"simple\">\n<dt>General information for host kernel, boot</dt>\n<dd><p>argument and memory.</p>\n</dd>\n</dl>"
				},
				"console_vuart": {
					"$ref": "#/definitions/ConsoleVuartConfiguration",
					"default": "None",
					"title": "Console virtual UART type",
					"description": "<dl class=\"simple\">\n<dt>Select the console virtual UART (vUART) type. Add the console settings to the</dt>\n<dd><p>kernel command line by typing them in the \"Linux kernel command-line parameters\" text box (for\nexample, console=ttyS0 for COM port 1).</p>\n</dd>\n</dl>"
				},
				"mmio_resources": {
					"$ref": "#/definitions/MMIOResourcesConfiguration",
					"title": "mmio_resources",
					"description": "<p>MMIO resources to passthrough.</p>"
				},
				"pt_intx": {
					"type": "string",
					"title": "pt_intx",
					"description": "<dl class=\"simple\">\n<dt>Specify the pre-launched VM owned IOAPIC pins and the corresponding mapping</dt>\n<dd><p>between physical GSI and virtual GSI.</p>\n</dd>\n</dl>"
				},
				"pci_devs": {
					"$ref": "#/definitions/PCIDevsConfiguration",
					"title": "PCI device assignment",
					"description": ""
				},
				"PTM": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Precision Time Measurement",
					"description": "<dl class=\"simple\">\n<dt>Enable virtualization of PCIe Precision Time Measurement (PTM) mechanism for</dt>\n<dd><p>devices with PTM capability and for real-time application. The hypervisor provides PCIe root\nport emulation instead of host bridge emulation for the VM. PTM coordinates timing between the\ndevice and root port with the device's local timebases without relying on software.</p>\n</dd>\n</dl>"
				}
			}
		},
		"ServiceMemoryInfo": {
			"type": "object",
			"required": [
				"start_hpa"
			],
			"properties": {
				"start_hpa": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x100000000",
					"title": "start_hpa",
					"description": "<p>The starting physical address in host for the VM.</p>"
				},
				"size": {
					"$ref": "#/definitions/MemorySizeType",
					"default": "0x20000000",
					"title": "size",
					"description": "<p>The memory size in bytes for the VM. Default value is <span class=\"docutils literal\">0x200000000</span>.</p>"
				},
				"start_hpa2": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x0",
					"title": "start_hpa2",
					"description": "<p>Start of second HPA for non-contiguous allocations in host for the VM.</p>"
				},
				"size_hpa2": {
					"$ref": "#/definitions/MemorySizeType",
					"default": "0x0",
					"title": "size_hpa2",
					"description": "<p>Memory size of second HPA for non-contiguous allocations in Bytes for the VM.</p>"
				}
			}
		},
		"ServiceVMConfigType": {
			"type": "object",
			"required": [
				"load_order",
				"vm_type",
				"name",
				"clos",
				"memory",
				"priority",
				"companion_vmid",
				"console_vuart"
			],
			"properties": {
				"load_order": {
					"$ref": "#/definitions/LoadOrderType",
					"title": "Load order",
					"description": "<p>Specify the load_order.</p>"
				},
				"vm_type": {
					"$ref": "#/definitions/VMType",
					"title": "VM type",
					"description": "<dl class=\"simple\">\n<dt>Select the VM type. A standard VM (<span class=\"docutils literal\">STANDARD_VM</span>) is for general-purpose</dt>\n<dd><p>applications, such as human-machine interface (HMI). A real-time VM (<span class=\"docutils literal\">RTVM</span>) offers special\nfeatures for time-sensitive applications.</p>\n</dd>\n</dl>"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 15,
					"pattern": "^\\S+$",
					"title": "VM name",
					"description": "<dl class=\"simple\">\n<dt>Specify the name used to identify this VM. The VM name will be shown in the</dt>\n<dd><p>hypervisor console vm_list command.</p>\n</dd>\n</dl>"
				},
				"lapic_passthrough": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "LAPIC passthrough",
					"description": "<dl class=\"simple\">\n<dt>Enable LAPIC passthrough for this VM. This feature is required for VMs with</dt>\n<dd><p>stringent real-time performance needs.</p>\n</dd>\n</dl>"
				},
				"io_completion_polling": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "I/O completion polling",
					"description": "<dl class=\"simple\">\n<dt>Enable polling mode for I/O completion for this VM. This feature is required for</dt>\n<dd><p>VMs with stringent real-time performance needs.</p>\n</dd>\n</dl>"
				},
				"nested_virtualization_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Nested virtualization",
					"description": "<p>Enable nested virtualization for KVM.</p>"
				},
				"virtual_cat_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Virtual Cache Allocation Technology (vCAT)",
					"description": "<dl class=\"simple\">\n<dt>Enable virtualization of the Cache Allocation Technology (CAT) feature in RDT. CAT</dt>\n<dd><p>enables you to allocate cache to VMs, providing isolation to avoid performance interference from\nother VMs.</p>\n</dd>\n</dl>"
				},
				"secure_world_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "secure_world_support",
					"description": "<p>Specify secure world support for trustry OS.</p>"
				},
				"hide_mtrr_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "hide_mtrr_support",
					"description": "<p>Specify MTRR capability to hide for VM.</p>"
				},
				"security_vm": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "security_vm",
					"description": "<p>Specify TPM2 FIXUP for VM.</p>"
				},
				"cpu_affinity": {
					"$ref": "#/definitions/CPUAffinityConfiguration",
					"title": "Physical CPU affinity",
					"description": "<dl class=\"simple\">\n<dt>Select a subset of physical CPUs that this VM can use. More than one can be</dt>\n<dd><p>selected.</p>\n</dd>\n</dl>"
				},
				"clos": {
					"$ref": "#/definitions/CLOSConfiguration",
					"title": "clos",
					"description": "<dl class=\"simple\">\n<dt>Class of Service for Cache Allocation Technology.</dt>\n<dd><p>Refer SDM 17.19.2 for details, and use with caution.</p>\n</dd>\n</dl>"
				},
				"memory": {
					"$ref": "#/definitions/ServiceMemoryInfo",
					"title": "memory",
					"description": "<p>Specify memory information for Service and User VMs.</p>"
				},
				"priority": {
					"$ref": "#/definitions/PriorityType",
					"default": "PRIO_LOW",
					"title": "priority",
					"description": "<p>Specify the VM vCPU priority for scheduling.</p>"
				},
				"companion_vmid": {
					"type": "integer",
					"default": 65535,
					"title": "companion_vmid",
					"description": "<p>Specify the companion VM id of this VM.</p>"
				},
				"os_config": {
					"$ref": "#/definitions/OSConfigurations",
					"title": "os_config",
					"description": "<dl class=\"simple\">\n<dt>General information for host kernel, boot</dt>\n<dd><p>argument and memory.</p>\n</dd>\n</dl>"
				},
				"console_vuart": {
					"$ref": "#/definitions/ConsoleVuartConfiguration",
					"default": "None",
					"title": "Console virtual UART type",
					"description": "<dl class=\"simple\">\n<dt>Select the console virtual UART (vUART) type. Add the console settings to the</dt>\n<dd><p>kernel command line by typing them in the \"Linux kernel command-line parameters\" text box (for\nexample, console=ttyS0 for COM port 1).</p>\n</dd>\n</dl>"
				}
			}
		},
		"PostLaunchedMemoryInfo": {
			"type": "object",
			"required": [
				"whole"
			],
			"properties": {
				"whole": {
					"type": "integer",
					"default": 256,
					"title": "VM physical memory allocation (MB)",
					"description": "<p>Specify the physical memory allocated to this VM in Megabytes.</p>"
				}
			}
		},
		"PostLaunchedMMIOResourcesConfiguration": {
			"type": "object",
			"properties": {
				"TPM2": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Trusted platform module (TPM2) passthrough",
					"description": "<p>Pass through the trusted platform module (TPM2) device to this VM.</p>"
				}
			}
		},
		"PostLaunchedVMConfigType": {
			"type": "object",
			"required": [
				"load_order",
				"vm_type",
				"name",
				"clos",
				"memory",
				"priority",
				"companion_vmid",
				"console_vuart",
				"os_type",
				"vbootloader",
				"vuart0",
				"virtio_devices"
			],
			"properties": {
				"load_order": {
					"$ref": "#/definitions/LoadOrderType",
					"title": "Load order",
					"description": "<p>Specify the load_order.</p>"
				},
				"vm_type": {
					"$ref": "#/definitions/VMType",
					"title": "VM type",
					"description": "<dl class=\"simple\">\n<dt>Select the VM type. A standard VM (<span class=\"docutils literal\">STANDARD_VM</span>) is for general-purpose</dt>\n<dd><p>applications, such as human-machine interface (HMI). A real-time VM (<span class=\"docutils literal\">RTVM</span>) offers special\nfeatures for time-sensitive applications.</p>\n</dd>\n</dl>"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 15,
					"pattern": "^\\S+$",
					"title": "VM name",
					"description": "<dl class=\"simple\">\n<dt>Specify the name used to identify this VM. The VM name will be shown in the</dt>\n<dd><p>hypervisor console vm_list command.</p>\n</dd>\n</dl>"
				},
				"lapic_passthrough": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "LAPIC passthrough",
					"description": "<dl class=\"simple\">\n<dt>Enable LAPIC passthrough for this VM. This feature is required for VMs with</dt>\n<dd><p>stringent real-time performance needs.</p>\n</dd>\n</dl>"
				},
				"io_completion_polling": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "I/O completion polling",
					"description": "<dl class=\"simple\">\n<dt>Enable polling mode for I/O completion for this VM. This feature is required for</dt>\n<dd><p>VMs with stringent real-time performance needs.</p>\n</dd>\n</dl>"
				},
				"nested_virtualization_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Nested virtualization",
					"description": "<p>Enable nested virtualization for KVM.</p>"
				},
				"virtual_cat_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Virtual Cache Allocation Technology (vCAT)",
					"description": "<dl class=\"simple\">\n<dt>Enable virtualization of the Cache Allocation Technology (CAT) feature in RDT. CAT</dt>\n<dd><p>enables you to allocate cache to VMs, providing isolation to avoid performance interference from\nother VMs.</p>\n</dd>\n</dl>"
				},
				"secure_world_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "secure_world_support",
					"description": "<p>Specify secure world support for trustry OS.</p>"
				},
				"hide_mtrr_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "hide_mtrr_support",
					"description": "<p>Specify MTRR capability to hide for VM.</p>"
				},
				"security_vm": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "security_vm",
					"description": "<p>Specify TPM2 FIXUP for VM.</p>"
				},
				"cpu_affinity": {
					"$ref": "#/definitions/CPUAffinityConfiguration",
					"title": "Physical CPU affinity",
					"description": "<dl class=\"simple\">\n<dt>Select a subset of physical CPUs that this VM can use. More than one can be</dt>\n<dd><p>selected.</p>\n</dd>\n</dl>"
				},
				"clos": {
					"$ref": "#/definitions/CLOSConfiguration",
					"title": "clos",
					"description": "<dl class=\"simple\">\n<dt>Class of Service for Cache Allocation Technology.</dt>\n<dd><p>Refer SDM 17.19.2 for details, and use with caution.</p>\n</dd>\n</dl>"
				},
				"memory": {
					"$ref": "#/definitions/PostLaunchedMemoryInfo",
					"title": "memory",
					"description": "<p>Specify memory information for Service and User VMs.</p>"
				},
				"priority": {
					"$ref": "#/definitions/PriorityType",
					"default": "PRIO_LOW",
					"title": "priority",
					"description": "<p>Specify the VM vCPU priority for scheduling.</p>"
				},
				"companion_vmid": {
					"type": "integer",
					"default": 65535,
					"title": "companion_vmid",
					"description": "<p>Specify the companion VM id of this VM.</p>"
				},
				"console_vuart": {
					"$ref": "#/definitions/ConsoleVuartConfiguration",
					"default": "None",
					"title": "Console virtual UART type",
					"description": "<dl class=\"simple\">\n<dt>Select the console virtual UART (vUART) type. Add the console settings to the</dt>\n<dd><p>kernel command line by typing them in the \"Linux kernel command-line parameters\" text box (for\nexample, console=ttyS0 for COM port 1).</p>\n</dd>\n</dl>"
				},
				"mmio_resources": {
					"$ref": "#/definitions/PostLaunchedMMIOResourcesConfiguration",
					"title": "mmio_resources",
					"description": "<p>MMIO resources to passthrough.</p>"
				},
				"pci_devs": {
					"$ref": "#/definitions/PCIDevsConfiguration",
					"title": "PCI device assignment",
					"description": ""
				},
				"PTM": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Precision Time Measurement",
					"description": "<dl class=\"simple\">\n<dt>Enable virtualization of PCIe Precision Time Measurement (PTM) mechanism for</dt>\n<dd><p>devices with PTM capability and for real-time application. The hypervisor provides PCIe root\nport emulation instead of host bridge emulation for the VM. PTM coordinates timing between the\ndevice and root port with the device's local timebases without relying on software.</p>\n</dd>\n</dl>"
				},
				"os_type": {
					"$ref": "#/definitions/OSType",
					"default": "Non-Windows OS",
					"title": "OS type",
					"description": "<dl class=\"simple\">\n<dt>Select the OS type for this VM. This is required to run Windows in a User VM. See</dt>\n<dd><p><a class=\"reference external\" href=\"https://projectacrn.github.io/latest/user-guides/acrn-dm-parameters.html#acrn-dm-parameters\" target=\"_blank\">Device Model Parameters</a> for how to include this in the Device Model arguments.</p>\n</dd>\n</dl>"
				},
				"vbootloader": {
					"$ref": "#/definitions/EnablementType",
					"default": "Enable",
					"title": "OVMF (Open Virtual Machine Firmware)",
					"description": "<p>Use virtual bootloader OVMF (Open Virtual Machine Firmware) to boot this VM.</p>"
				},
				"vuart0": {
					"$ref": "#/definitions/EnablementType",
					"default": "Enable",
					"title": "Emulate COM1 as stdio I/O in Device Model",
					"description": "<dl class=\"simple\">\n<dt>Enable the ACRN Device Model to emulate COM1 as a User VM stdio I/O. Hypervisor</dt>\n<dd><p>global emulation will take priority over this VM setting.</p>\n</dd>\n</dl>"
				},
				"usb_xhci": {
					"type": "string",
					"pattern": "^([\\d]+-[\\d]+){0,1}(:[\\d]+-[\\d]+)*$",
					"title": "Virtual USB host controller interface",
					"description": "<dl class=\"simple\">\n<dt>Select the USB physical bus and port number that will be emulated by the ACRN</dt>\n<dd><p>Device Model for this VM. USB 3.0, 2.0, and 1.0 are supported.</p>\n</dd>\n</dl>"
				},
				"virtio_devices": {
					"type": "object",
					"properties": {
						"console": {
							"type": "string",
							"title": "console",
							"description": "<dl class=\"simple\">\n<dt>The virtio console device setting.Input format:</dt>\n<dd><p><span class=\"docutils literal\"><span class=\"pre\">[@]stdio|tty|pty|sock:portname[=portpath][,[@]stdio|tty|pty:portname[=portpath]]</span></span></p>\n</dd>\n</dl>"
						},
						"network": {
							"type": "string",
							"title": "network",
							"description": "<dl class=\"simple\">\n<dt>The virtio network device setting.</dt>\n<dd><p>Input format: <span class=\"docutils literal\"><span class=\"pre\">device_name[,vhost][,mac=XX:XX:XX:XX:XX:XX]</span></span>.\nThe <span class=\"docutils literal\">device_name</span> is the name of the TAP (or MacVTap) device.\nIt must include the keyword <span class=\"docutils literal\">tap</span>. <span class=\"docutils literal\">vhost</span> specifies the\nvhost backend; otherwise, the VBSU backend is used. The <span class=\"docutils literal\">mac</span>\naddress is optional.</p>\n</dd>\n</dl>"
						},
						"input": {
							"type": "string",
							"title": "input",
							"description": "<p>The virtio input device setting.</p>"
						},
						"block": {
							"type": "string",
							"title": "block",
							"description": "<dl class=\"simple\">\n<dt>The virtio block device setting.</dt>\n<dd><p>Format: [blk partition:][img path] e.g.: /dev/sda3:./a/b.img</p>\n</dd>\n</dl>"
						}
					},
					"title": "Virt-IO devices",
					"description": "<p>Enable virt-IO devices in post-launched VMs.</p>"
				}
			}
		},
		"BasicMemoryInfo": {
			"type": "object",
			"required": [
				"whole"
			],
			"properties": {
				"whole": {
					"type": "integer",
					"default": 256,
					"title": "VM physical memory allocation (MB)",
					"description": "<p>Specify the physical memory allocated to this VM in Megabytes.</p>"
				}
			}
		},
		"VMBasicConfigType": {
			"type": "object",
			"required": [
				"vm_type",
				"name",
				"memory",
				"console_vuart",
				"os_type",
				"vbootloader",
				"vuart0",
				"virtio_devices"
			],
			"properties": {
				"vm_type": {
					"$ref": "#/definitions/BasicVMType",
					"title": "VM type",
					"description": "<dl class=\"simple\">\n<dt>Select the VM type. A standard VM (<span class=\"docutils literal\">STANDARD_VM</span>) is for general-purpose</dt>\n<dd><p>applications, such as human-machine interface (HMI). A real-time VM (<span class=\"docutils literal\">RTVM</span>) offers special\nfeatures for time-sensitive applications.</p>\n</dd>\n</dl>"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 15,
					"pattern": "^\\S+$",
					"title": "VM name",
					"description": "<dl class=\"simple\">\n<dt>Specify the name used to identify this VM. The VM name will be shown in the</dt>\n<dd><p>hypervisor console vm_list command.</p>\n</dd>\n</dl>"
				},
				"cpu_affinity": {
					"$ref": "#/definitions/CPUAffinityConfiguration",
					"title": "Physical CPU affinity",
					"description": "<dl class=\"simple\">\n<dt>Select a subset of physical CPUs that this VM can use. More than one can be</dt>\n<dd><p>selected.</p>\n</dd>\n</dl>"
				},
				"memory": {
					"$ref": "#/definitions/BasicMemoryInfo",
					"title": "memory",
					"description": "<p>Specify memory information for Service and User VMs.</p>"
				},
				"os_config": {
					"$ref": "#/definitions/OSConfigurations",
					"title": "os_config",
					"description": "<dl class=\"simple\">\n<dt>General information for host kernel, boot</dt>\n<dd><p>argument and memory.</p>\n</dd>\n</dl>"
				},
				"console_vuart": {
					"$ref": "#/definitions/ConsoleVuartConfiguration",
					"default": "None",
					"title": "Console virtual UART type",
					"description": "<dl class=\"simple\">\n<dt>Select the console virtual UART (vUART) type. Add the console settings to the</dt>\n<dd><p>kernel command line by typing them in the \"Linux kernel command-line parameters\" text box (for\nexample, console=ttyS0 for COM port 1).</p>\n</dd>\n</dl>"
				},
				"mmio_resources": {
					"$ref": "#/definitions/MMIOResourcesConfiguration",
					"title": "mmio_resources",
					"description": "<p>MMIO resources to passthrough.</p>"
				},
				"pci_devs": {
					"$ref": "#/definitions/PCIDevsConfiguration",
					"title": "PCI device assignment",
					"description": ""
				},
				"os_type": {
					"$ref": "#/definitions/OSType",
					"default": "Non-Windows OS",
					"title": "OS type",
					"description": "<dl class=\"simple\">\n<dt>Select the OS type for this VM. This is required to run Windows in a User VM. See</dt>\n<dd><p><a class=\"reference external\" href=\"https://projectacrn.github.io/latest/user-guides/acrn-dm-parameters.html#acrn-dm-parameters\" target=\"_blank\">Device Model Parameters</a> for how to include this in the Device Model arguments.</p>\n</dd>\n</dl>"
				},
				"vbootloader": {
					"$ref": "#/definitions/EnablementType",
					"default": "Enable",
					"title": "OVMF (Open Virtual Machine Firmware)",
					"description": "<p>Use virtual bootloader OVMF (Open Virtual Machine Firmware) to boot this VM.</p>"
				},
				"vuart0": {
					"$ref": "#/definitions/EnablementType",
					"default": "Enable",
					"title": "Emulate COM1 as stdio I/O in Device Model",
					"description": "<dl class=\"simple\">\n<dt>Enable the ACRN Device Model to emulate COM1 as a User VM stdio I/O. Hypervisor</dt>\n<dd><p>global emulation will take priority over this VM setting.</p>\n</dd>\n</dl>"
				},
				"usb_xhci": {
					"type": "string",
					"pattern": "^([\\d]+-[\\d]+){0,1}(:[\\d]+-[\\d]+)*$",
					"title": "Virtual USB host controller interface",
					"description": "<dl class=\"simple\">\n<dt>Select the USB physical bus and port number that will be emulated by the ACRN</dt>\n<dd><p>Device Model for this VM. USB 3.0, 2.0, and 1.0 are supported.</p>\n</dd>\n</dl>"
				},
				"virtio_devices": {
					"type": "object",
					"properties": {
						"console": {
							"type": "string",
							"title": "console",
							"description": "<dl class=\"simple\">\n<dt>The virtio console device setting.Input format:</dt>\n<dd><p><span class=\"docutils literal\"><span class=\"pre\">[@]stdio|tty|pty|sock:portname[=portpath][,[@]stdio|tty|pty:portname[=portpath]]</span></span></p>\n</dd>\n</dl>"
						},
						"network": {
							"type": "string",
							"title": "network",
							"description": "<dl class=\"simple\">\n<dt>The virtio network device setting.</dt>\n<dd><p>Input format: <span class=\"docutils literal\"><span class=\"pre\">device_name[,vhost][,mac=XX:XX:XX:XX:XX:XX]</span></span>.\nThe <span class=\"docutils literal\">device_name</span> is the name of the TAP (or MacVTap) device.\nIt must include the keyword <span class=\"docutils literal\">tap</span>. <span class=\"docutils literal\">vhost</span> specifies the\nvhost backend; otherwise, the VBSU backend is used. The <span class=\"docutils literal\">mac</span>\naddress is optional.</p>\n</dd>\n</dl>"
						},
						"input": {
							"type": "string",
							"title": "input",
							"description": "<p>The virtio input device setting.</p>"
						},
						"block": {
							"type": "string",
							"title": "block",
							"description": "<dl class=\"simple\">\n<dt>The virtio block device setting.</dt>\n<dd><p>Format: [blk partition:][img path] e.g.: /dev/sda3:./a/b.img</p>\n</dd>\n</dl>"
						}
					},
					"title": "Virt-IO devices",
					"description": "<p>Enable virt-IO devices in post-launched VMs.</p>"
				}
			}
		},
		"PreLaunchedVMBasicConfigType": {
			"type": "object",
			"required": [
				"vm_type",
				"name",
				"console_vuart"
			],
			"properties": {
				"vm_type": {
					"$ref": "#/definitions/BasicVMType",
					"title": "VM type",
					"description": "<dl class=\"simple\">\n<dt>Select the VM type. A standard VM (<span class=\"docutils literal\">STANDARD_VM</span>) is for general-purpose</dt>\n<dd><p>applications, such as human-machine interface (HMI). A real-time VM (<span class=\"docutils literal\">RTVM</span>) offers special\nfeatures for time-sensitive applications.</p>\n</dd>\n</dl>"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 15,
					"pattern": "^\\S+$",
					"title": "VM name",
					"description": "<dl class=\"simple\">\n<dt>Specify the name used to identify this VM. The VM name will be shown in the</dt>\n<dd><p>hypervisor console vm_list command.</p>\n</dd>\n</dl>"
				},
				"cpu_affinity": {
					"$ref": "#/definitions/CPUAffinityConfiguration",
					"title": "Physical CPU affinity",
					"description": "<dl class=\"simple\">\n<dt>Select a subset of physical CPUs that this VM can use. More than one can be</dt>\n<dd><p>selected.</p>\n</dd>\n</dl>"
				},
				"os_config": {
					"$ref": "#/definitions/OSConfigurations",
					"title": "os_config",
					"description": "<dl class=\"simple\">\n<dt>General information for host kernel, boot</dt>\n<dd><p>argument and memory.</p>\n</dd>\n</dl>"
				},
				"console_vuart": {
					"$ref": "#/definitions/ConsoleVuartConfiguration",
					"default": "None",
					"title": "Console virtual UART type",
					"description": "<dl class=\"simple\">\n<dt>Select the console virtual UART (vUART) type. Add the console settings to the</dt>\n<dd><p>kernel command line by typing them in the \"Linux kernel command-line parameters\" text box (for\nexample, console=ttyS0 for COM port 1).</p>\n</dd>\n</dl>"
				},
				"mmio_resources": {
					"$ref": "#/definitions/MMIOResourcesConfiguration",
					"title": "mmio_resources",
					"description": "<p>MMIO resources to passthrough.</p>"
				},
				"pci_devs": {
					"$ref": "#/definitions/PCIDevsConfiguration",
					"title": "PCI device assignment",
					"description": ""
				}
			}
		},
		"ServiceVMBasicConfigType": {
			"type": "object",
			"required": [
				"vm_type",
				"name",
				"console_vuart"
			],
			"properties": {
				"vm_type": {
					"$ref": "#/definitions/BasicVMType",
					"title": "VM type",
					"description": "<dl class=\"simple\">\n<dt>Select the VM type. A standard VM (<span class=\"docutils literal\">STANDARD_VM</span>) is for general-purpose</dt>\n<dd><p>applications, such as human-machine interface (HMI). A real-time VM (<span class=\"docutils literal\">RTVM</span>) offers special\nfeatures for time-sensitive applications.</p>\n</dd>\n</dl>"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 15,
					"pattern": "^\\S+$",
					"title": "VM name",
					"description": "<dl class=\"simple\">\n<dt>Specify the name used to identify this VM. The VM name will be shown in the</dt>\n<dd><p>hypervisor console vm_list command.</p>\n</dd>\n</dl>"
				},
				"cpu_affinity": {
					"$ref": "#/definitions/CPUAffinityConfiguration",
					"title": "Physical CPU affinity",
					"description": "<dl class=\"simple\">\n<dt>Select a subset of physical CPUs that this VM can use. More than one can be</dt>\n<dd><p>selected.</p>\n</dd>\n</dl>"
				},
				"os_config": {
					"$ref": "#/definitions/OSConfigurations",
					"title": "os_config",
					"description": "<dl class=\"simple\">\n<dt>General information for host kernel, boot</dt>\n<dd><p>argument and memory.</p>\n</dd>\n</dl>"
				},
				"console_vuart": {
					"$ref": "#/definitions/ConsoleVuartConfiguration",
					"default": "None",
					"title": "Console virtual UART type",
					"description": "<dl class=\"simple\">\n<dt>Select the console virtual UART (vUART) type. Add the console settings to the</dt>\n<dd><p>kernel command line by typing them in the \"Linux kernel command-line parameters\" text box (for\nexample, console=ttyS0 for COM port 1).</p>\n</dd>\n</dl>"
				}
			}
		},
		"PostLaunchedVMBasicConfigType": {
			"type": "object",
			"required": [
				"vm_type",
				"name",
				"memory",
				"console_vuart",
				"os_type",
				"vbootloader",
				"vuart0",
				"virtio_devices"
			],
			"properties": {
				"vm_type": {
					"$ref": "#/definitions/BasicVMType",
					"title": "VM type",
					"description": "<dl class=\"simple\">\n<dt>Select the VM type. A standard VM (<span class=\"docutils literal\">STANDARD_VM</span>) is for general-purpose</dt>\n<dd><p>applications, such as human-machine interface (HMI). A real-time VM (<span class=\"docutils literal\">RTVM</span>) offers special\nfeatures for time-sensitive applications.</p>\n</dd>\n</dl>"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 15,
					"pattern": "^\\S+$",
					"title": "VM name",
					"description": "<dl class=\"simple\">\n<dt>Specify the name used to identify this VM. The VM name will be shown in the</dt>\n<dd><p>hypervisor console vm_list command.</p>\n</dd>\n</dl>"
				},
				"cpu_affinity": {
					"$ref": "#/definitions/CPUAffinityConfiguration",
					"title": "Physical CPU affinity",
					"description": "<dl class=\"simple\">\n<dt>Select a subset of physical CPUs that this VM can use. More than one can be</dt>\n<dd><p>selected.</p>\n</dd>\n</dl>"
				},
				"memory": {
					"$ref": "#/definitions/PostLaunchedMemoryInfo",
					"title": "memory",
					"description": "<p>Specify memory information for Service and User VMs.</p>"
				},
				"console_vuart": {
					"$ref": "#/definitions/ConsoleVuartConfiguration",
					"default": "None",
					"title": "Console virtual UART type",
					"description": "<dl class=\"simple\">\n<dt>Select the console virtual UART (vUART) type. Add the console settings to the</dt>\n<dd><p>kernel command line by typing them in the \"Linux kernel command-line parameters\" text box (for\nexample, console=ttyS0 for COM port 1).</p>\n</dd>\n</dl>"
				},
				"mmio_resources": {
					"$ref": "#/definitions/PostLaunchedMMIOResourcesConfiguration",
					"title": "mmio_resources",
					"description": "<p>MMIO resources to passthrough.</p>"
				},
				"pci_devs": {
					"$ref": "#/definitions/PCIDevsConfiguration",
					"title": "PCI device assignment",
					"description": ""
				},
				"os_type": {
					"$ref": "#/definitions/OSType",
					"default": "Non-Windows OS",
					"title": "OS type",
					"description": "<dl class=\"simple\">\n<dt>Select the OS type for this VM. This is required to run Windows in a User VM. See</dt>\n<dd><p><a class=\"reference external\" href=\"https://projectacrn.github.io/latest/user-guides/acrn-dm-parameters.html#acrn-dm-parameters\" target=\"_blank\">Device Model Parameters</a> for how to include this in the Device Model arguments.</p>\n</dd>\n</dl>"
				},
				"vbootloader": {
					"$ref": "#/definitions/EnablementType",
					"default": "Enable",
					"title": "OVMF (Open Virtual Machine Firmware)",
					"description": "<p>Use virtual bootloader OVMF (Open Virtual Machine Firmware) to boot this VM.</p>"
				},
				"vuart0": {
					"$ref": "#/definitions/EnablementType",
					"default": "Enable",
					"title": "Emulate COM1 as stdio I/O in Device Model",
					"description": "<dl class=\"simple\">\n<dt>Enable the ACRN Device Model to emulate COM1 as a User VM stdio I/O. Hypervisor</dt>\n<dd><p>global emulation will take priority over this VM setting.</p>\n</dd>\n</dl>"
				},
				"usb_xhci": {
					"type": "string",
					"pattern": "^([\\d]+-[\\d]+){0,1}(:[\\d]+-[\\d]+)*$",
					"title": "Virtual USB host controller interface",
					"description": "<dl class=\"simple\">\n<dt>Select the USB physical bus and port number that will be emulated by the ACRN</dt>\n<dd><p>Device Model for this VM. USB 3.0, 2.0, and 1.0 are supported.</p>\n</dd>\n</dl>"
				},
				"virtio_devices": {
					"type": "object",
					"properties": {
						"console": {
							"type": "string",
							"title": "console",
							"description": "<dl class=\"simple\">\n<dt>The virtio console device setting.Input format:</dt>\n<dd><p><span class=\"docutils literal\"><span class=\"pre\">[@]stdio|tty|pty|sock:portname[=portpath][,[@]stdio|tty|pty:portname[=portpath]]</span></span></p>\n</dd>\n</dl>"
						},
						"network": {
							"type": "string",
							"title": "network",
							"description": "<dl class=\"simple\">\n<dt>The virtio network device setting.</dt>\n<dd><p>Input format: <span class=\"docutils literal\"><span class=\"pre\">device_name[,vhost][,mac=XX:XX:XX:XX:XX:XX]</span></span>.\nThe <span class=\"docutils literal\">device_name</span> is the name of the TAP (or MacVTap) device.\nIt must include the keyword <span class=\"docutils literal\">tap</span>. <span class=\"docutils literal\">vhost</span> specifies the\nvhost backend; otherwise, the VBSU backend is used. The <span class=\"docutils literal\">mac</span>\naddress is optional.</p>\n</dd>\n</dl>"
						},
						"input": {
							"type": "string",
							"title": "input",
							"description": "<p>The virtio input device setting.</p>"
						},
						"block": {
							"type": "string",
							"title": "block",
							"description": "<dl class=\"simple\">\n<dt>The virtio block device setting.</dt>\n<dd><p>Format: [blk partition:][img path] e.g.: /dev/sda3:./a/b.img</p>\n</dd>\n</dl>"
						}
					},
					"title": "Virt-IO devices",
					"description": "<p>Enable virt-IO devices in post-launched VMs.</p>"
				}
			}
		},
		"BasicFeatureOptionsType": {
			"type": "object",
			"required": [
				"IVSHMEM"
			],
			"properties": {
				"IVSHMEM": {
					"$ref": "#/definitions/IVSHMEMInfo",
					"title": "Inter-VM shared memory",
					"description": ""
				}
			}
		},
		"HVBasicConfigType": {
			"type": "object",
			"required": [
				"DEBUG_OPTIONS",
				"FEATURES",
				"vuart_connections"
			],
			"properties": {
				"DEBUG_OPTIONS": {
					"$ref": "#/definitions/DebugOptionsType",
					"title": "Debug options",
					"description": "<p>Configure the debug facilities.</p>"
				},
				"FEATURES": {
					"$ref": "#/definitions/BasicFeatureOptionsType",
					"title": "Hypervisor features",
					"description": "<p>Enable hypervisor features.</p>"
				},
				"vuart_connections": {
					"$ref": "#/definitions/VuartConnectionsType",
					"title": "Virtual UART connection",
					"description": "<dl class=\"simple\">\n<dt>Specify the vUART connection settings.</dt>\n<dd><p>Refer to <a class=\"reference external\" href=\"https://projectacrn.github.io/latest/tutorials/vuart_configuration.html#vuart-config\" target=\"_blank\">Enable vUART Configurations</a> for detailed vUART settings.</p>\n</dd>\n</dl>"
				}
			}
		},
		"AdvancedMemoryInfo": {
			"type": "object",
			"required": [
				"start_hpa"
			],
			"properties": {
				"start_hpa": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x100000000",
					"title": "start_hpa",
					"description": "<p>The starting physical address in host for the VM.</p>"
				},
				"size": {
					"$ref": "#/definitions/MemorySizeType",
					"default": "0x20000000",
					"title": "size",
					"description": "<p>The memory size in bytes for the VM. Default value is <span class=\"docutils literal\">0x200000000</span>.</p>"
				},
				"start_hpa2": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x0",
					"title": "start_hpa2",
					"description": "<p>Start of second HPA for non-contiguous allocations in host for the VM.</p>"
				},
				"size_hpa2": {
					"$ref": "#/definitions/MemorySizeType",
					"default": "0x0",
					"title": "size_hpa2",
					"description": "<p>Memory size of second HPA for non-contiguous allocations in Bytes for the VM.</p>"
				}
			}
		},
		"VMAdvancedConfigType": {
			"type": "object",
			"required": [
				"clos",
				"memory"
			],
			"properties": {
				"lapic_passthrough": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "LAPIC passthrough",
					"description": "<dl class=\"simple\">\n<dt>Enable LAPIC passthrough for this VM. This feature is required for VMs with</dt>\n<dd><p>stringent real-time performance needs.</p>\n</dd>\n</dl>"
				},
				"io_completion_polling": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "I/O completion polling",
					"description": "<dl class=\"simple\">\n<dt>Enable polling mode for I/O completion for this VM. This feature is required for</dt>\n<dd><p>VMs with stringent real-time performance needs.</p>\n</dd>\n</dl>"
				},
				"nested_virtualization_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Nested virtualization",
					"description": "<p>Enable nested virtualization for KVM.</p>"
				},
				"virtual_cat_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Virtual Cache Allocation Technology (vCAT)",
					"description": "<dl class=\"simple\">\n<dt>Enable virtualization of the Cache Allocation Technology (CAT) feature in RDT. CAT</dt>\n<dd><p>enables you to allocate cache to VMs, providing isolation to avoid performance interference from\nother VMs.</p>\n</dd>\n</dl>"
				},
				"clos": {
					"$ref": "#/definitions/CLOSConfiguration",
					"title": "clos",
					"description": "<dl class=\"simple\">\n<dt>Class of Service for Cache Allocation Technology.</dt>\n<dd><p>Refer SDM 17.19.2 for details, and use with caution.</p>\n</dd>\n</dl>"
				},
				"epc_section": {
					"$ref": "#/definitions/EPCSection",
					"title": "epc_section",
					"description": "<dl class=\"simple\">\n<dt>Specify the Intel Software Guard Extensions (SGX) enclave page cache (EPC) section</dt>\n<dd><p>settings.</p>\n</dd>\n</dl>"
				},
				"memory": {
					"$ref": "#/definitions/AdvancedMemoryInfo",
					"title": "memory",
					"description": "<p>Specify memory information for Service and User VMs.</p>"
				},
				"pt_intx": {
					"type": "string",
					"title": "pt_intx",
					"description": "<dl class=\"simple\">\n<dt>Specify the pre-launched VM owned IOAPIC pins and the corresponding mapping</dt>\n<dd><p>between physical GSI and virtual GSI.</p>\n</dd>\n</dl>"
				},
				"PTM": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Precision Time Measurement",
					"description": "<dl class=\"simple\">\n<dt>Enable virtualization of PCIe Precision Time Measurement (PTM) mechanism for</dt>\n<dd><p>devices with PTM capability and for real-time application. The hypervisor provides PCIe root\nport emulation instead of host bridge emulation for the VM. PTM coordinates timing between the\ndevice and root port with the device's local timebases without relying on software.</p>\n</dd>\n</dl>"
				}
			}
		},
		"PreLaunchedVMAdvancedConfigType": {
			"type": "object",
			"required": [
				"clos",
				"memory"
			],
			"properties": {
				"lapic_passthrough": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "LAPIC passthrough",
					"description": "<dl class=\"simple\">\n<dt>Enable LAPIC passthrough for this VM. This feature is required for VMs with</dt>\n<dd><p>stringent real-time performance needs.</p>\n</dd>\n</dl>"
				},
				"io_completion_polling": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "I/O completion polling",
					"description": "<dl class=\"simple\">\n<dt>Enable polling mode for I/O completion for this VM. This feature is required for</dt>\n<dd><p>VMs with stringent real-time performance needs.</p>\n</dd>\n</dl>"
				},
				"nested_virtualization_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Nested virtualization",
					"description": "<p>Enable nested virtualization for KVM.</p>"
				},
				"virtual_cat_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Virtual Cache Allocation Technology (vCAT)",
					"description": "<dl class=\"simple\">\n<dt>Enable virtualization of the Cache Allocation Technology (CAT) feature in RDT. CAT</dt>\n<dd><p>enables you to allocate cache to VMs, providing isolation to avoid performance interference from\nother VMs.</p>\n</dd>\n</dl>"
				},
				"clos": {
					"$ref": "#/definitions/CLOSConfiguration",
					"title": "clos",
					"description": "<dl class=\"simple\">\n<dt>Class of Service for Cache Allocation Technology.</dt>\n<dd><p>Refer SDM 17.19.2 for details, and use with caution.</p>\n</dd>\n</dl>"
				},
				"epc_section": {
					"$ref": "#/definitions/EPCSection",
					"title": "epc_section",
					"description": "<dl class=\"simple\">\n<dt>Specify the Intel Software Guard Extensions (SGX) enclave page cache (EPC) section</dt>\n<dd><p>settings.</p>\n</dd>\n</dl>"
				},
				"memory": {
					"$ref": "#/definitions/PreLaunchedMemoryInfo",
					"title": "memory",
					"description": "<p>Specify memory information for Service and User VMs.</p>"
				},
				"pt_intx": {
					"type": "string",
					"title": "pt_intx",
					"description": "<dl class=\"simple\">\n<dt>Specify the pre-launched VM owned IOAPIC pins and the corresponding mapping</dt>\n<dd><p>between physical GSI and virtual GSI.</p>\n</dd>\n</dl>"
				},
				"PTM": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Precision Time Measurement",
					"description": "<dl class=\"simple\">\n<dt>Enable virtualization of PCIe Precision Time Measurement (PTM) mechanism for</dt>\n<dd><p>devices with PTM capability and for real-time application. The hypervisor provides PCIe root\nport emulation instead of host bridge emulation for the VM. PTM coordinates timing between the\ndevice and root port with the device's local timebases without relying on software.</p>\n</dd>\n</dl>"
				}
			}
		},
		"ServiceVMAdvancedConfigType": {
			"type": "object",
			"required": [
				"clos",
				"memory"
			],
			"properties": {
				"lapic_passthrough": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "LAPIC passthrough",
					"description": "<dl class=\"simple\">\n<dt>Enable LAPIC passthrough for this VM. This feature is required for VMs with</dt>\n<dd><p>stringent real-time performance needs.</p>\n</dd>\n</dl>"
				},
				"io_completion_polling": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "I/O completion polling",
					"description": "<dl class=\"simple\">\n<dt>Enable polling mode for I/O completion for this VM. This feature is required for</dt>\n<dd><p>VMs with stringent real-time performance needs.</p>\n</dd>\n</dl>"
				},
				"nested_virtualization_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Nested virtualization",
					"description": "<p>Enable nested virtualization for KVM.</p>"
				},
				"virtual_cat_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Virtual Cache Allocation Technology (vCAT)",
					"description": "<dl class=\"simple\">\n<dt>Enable virtualization of the Cache Allocation Technology (CAT) feature in RDT. CAT</dt>\n<dd><p>enables you to allocate cache to VMs, providing isolation to avoid performance interference from\nother VMs.</p>\n</dd>\n</dl>"
				},
				"clos": {
					"$ref": "#/definitions/CLOSConfiguration",
					"title": "clos",
					"description": "<dl class=\"simple\">\n<dt>Class of Service for Cache Allocation Technology.</dt>\n<dd><p>Refer SDM 17.19.2 for details, and use with caution.</p>\n</dd>\n</dl>"
				},
				"memory": {
					"$ref": "#/definitions/ServiceMemoryInfo",
					"title": "memory",
					"description": "<p>Specify memory information for Service and User VMs.</p>"
				}
			}
		},
		"PostLaunchedVMAdvancedConfigType": {
			"type": "object",
			"required": [
				"clos"
			],
			"properties": {
				"lapic_passthrough": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "LAPIC passthrough",
					"description": "<dl class=\"simple\">\n<dt>Enable LAPIC passthrough for this VM. This feature is required for VMs with</dt>\n<dd><p>stringent real-time performance needs.</p>\n</dd>\n</dl>"
				},
				"io_completion_polling": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "I/O completion polling",
					"description": "<dl class=\"simple\">\n<dt>Enable polling mode for I/O completion for this VM. This feature is required for</dt>\n<dd><p>VMs with stringent real-time performance needs.</p>\n</dd>\n</dl>"
				},
				"nested_virtualization_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Nested virtualization",
					"description": "<p>Enable nested virtualization for KVM.</p>"
				},
				"virtual_cat_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Virtual Cache Allocation Technology (vCAT)",
					"description": "<dl class=\"simple\">\n<dt>Enable virtualization of the Cache Allocation Technology (CAT) feature in RDT. CAT</dt>\n<dd><p>enables you to allocate cache to VMs, providing isolation to avoid performance interference from\nother VMs.</p>\n</dd>\n</dl>"
				},
				"clos": {
					"$ref": "#/definitions/CLOSConfiguration",
					"title": "clos",
					"description": "<dl class=\"simple\">\n<dt>Class of Service for Cache Allocation Technology.</dt>\n<dd><p>Refer SDM 17.19.2 for details, and use with caution.</p>\n</dd>\n</dl>"
				},
				"PTM": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Precision Time Measurement",
					"description": "<dl class=\"simple\">\n<dt>Enable virtualization of PCIe Precision Time Measurement (PTM) mechanism for</dt>\n<dd><p>devices with PTM capability and for real-time application. The hypervisor provides PCIe root\nport emulation instead of host bridge emulation for the VM. PTM coordinates timing between the\ndevice and root port with the device's local timebases without relying on software.</p>\n</dd>\n</dl>"
				}
			}
		},
		"AdvancedFeatureOptionsType": {
			"type": "object",
			"required": [
				"RELOC",
				"SCHEDULER",
				"MULTIBOOT2",
				"ENFORCE_TURNOFF_AC",
				"ENFORCE_TURNOFF_GP",
				"RDT",
				"HYPERV_ENABLED",
				"ACPI_PARSE_ENABLED",
				"L1D_VMENTRY_ENABLED",
				"MCE_ON_PSC_DISABLED"
			],
			"properties": {
				"RELOC": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Hypervisor relocation in memory",
					"description": "<dl class=\"simple\">\n<dt>Enable hypervisor relocation in memory. The bootloader may need to change the</dt>\n<dd><p>location of the hypervisor because of other firmware.</p>\n</dd>\n</dl>"
				},
				"SCHEDULER": {
					"$ref": "#/definitions/SchedulerType",
					"default": "SCHED_BVT",
					"title": "Virtual CPU scheduler",
					"description": "<dl class=\"simple\">\n<dt>Select the scheduling algorithm used to determine which User VM runs on a shared</dt>\n<dd><p>virtual CPU.</p>\n</dd>\n</dl>"
				},
				"MULTIBOOT2": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Multiboot2",
					"description": "<dl class=\"simple\">\n<dt>Enable multiboot2 protocol support and multiboot1 downward compatibility. Disable</dt>\n<dd><p>this feature if multiboot1 meets your requirements and to reduce lines of code.</p>\n</dd>\n</dl>"
				},
				"ENFORCE_TURNOFF_AC": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Split lock detection",
					"description": "<dl class=\"simple\">\n<dt>Enable detection of split locks, which can negatively affect an application's</dt>\n<dd><p>real-time performance. If a lock is detected, an alignment check exception #AC occurs.</p>\n</dd>\n</dl>"
				},
				"ENFORCE_TURNOFF_GP": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Uncacheable-memory lock detection",
					"description": "<dl class=\"simple\">\n<dt>Enable detection of uncacheable-memory locks, which can negatively affect an</dt>\n<dd><p>application's real-time performance. If a lock is detected, a general-protection exception #GP\noccurs.</p>\n</dd>\n</dl>"
				},
				"RDT": {
					"$ref": "#/definitions/RDTType",
					"title": "Intel Resource Director Technology (RDT)",
					"description": "<dl class=\"simple\">\n<dt>Intel Resource Director Technology (RDT) provides cache and memory bandwidth</dt>\n<dd><p>allocation features. The features can be used to improve an application's real-time performance.</p>\n</dd>\n</dl>"
				},
				"HYPERV_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Hyper-V virtualization technology",
					"description": "<dl class=\"simple\">\n<dt>Enable Microsoft Hyper-V Hypervisor Top-Level Functional Specification (TFLS) for</dt>\n<dd><p>Windows User VMs.</p>\n</dd>\n</dl>"
				},
				"ACPI_PARSE_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Parse ACPI tables at runtime",
					"description": "<dl class=\"simple\">\n<dt>Enable ACPI runtime parsing to get DMAR (DMA remapping) configuration data from</dt>\n<dd><p>the APCI tables. Otherwise, use existing, static information from the associated board\nconfiguration file.</p>\n</dd>\n</dl>"
				},
				"L1D_VMENTRY_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Mitigate L1 terminal fault",
					"description": "<dl class=\"simple\">\n<dt>Enable L1 cache flush before VM entry to prevent L1 terminal fault. L1 terminal</dt>\n<dd><p>fault is a hardware vulnerability that allows unauthorized disclosure of information residing in\nthe L1 data cache.</p>\n</dd>\n</dl>"
				},
				"MCE_ON_PSC_DISABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Machine Check Error (MCE) workaround",
					"description": "<dl class=\"simple\">\n<dt>Enable the software workaround for Machine Check Error on Page Size Change</dt>\n<dd><p>(hardware bug in some processor families).</p>\n</dd>\n</dl>"
				},
				"SSRAM": {
					"$ref": "#/definitions/SSRAMInfo",
					"title": "Software SRAM (for real-time apps)",
					"description": ""
				}
			}
		},
		"AdvancedMemoryOptionsType": {
			"type": "object",
			"required": [
				"STACK_SIZE"
			],
			"properties": {
				"STACK_SIZE": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x2000",
					"title": "CPU memory stack size (bytes per CPU)",
					"description": "<dl class=\"simple\">\n<dt>Specify the size of the memory stack in bytes for each physical CPU. For example,</dt>\n<dd><p>if you specify 8 kilobytes, each CPU will get its own 8-kilobyte stack.</p>\n</dd>\n</dl>"
				}
			}
		},
		"AdvancedCapacitiesOptionsType": {
			"type": "object",
			"required": [
				"MAX_PCI_DEV_NUM",
				"MAX_PT_IRQ_ENTRIES",
				"MAX_MSIX_TABLE_NUM",
				"MAX_EMULATED_MMIO"
			],
			"properties": {
				"MAX_PCI_DEV_NUM": {
					"type": "integer",
					"minimum": 1,
					"maximum": 1024,
					"default": 96,
					"title": "Maximum number of PCI devices",
					"description": "<dl class=\"simple\">\n<dt>Specify the maximum number of PCI devices. This impacts the amount of memory used</dt>\n<dd><p>to maintain information about these PCI devices. The default value is calculated from the board\nconfiguration file. If you have PCI devices that were not detected by the Board Inspector, you\nmay need to change this maximum value.</p>\n</dd>\n</dl>"
				},
				"MAX_PT_IRQ_ENTRIES": {
					"type": "integer",
					"default": 256,
					"title": "Maximum number of IRQ entries for passthrough devices",
					"description": "<dl class=\"simple\">\n<dt>Specify the maximum number of interrupt request (IRQ) entries from all passthrough</dt>\n<dd><p>devices.</p>\n</dd>\n</dl>"
				},
				"MAX_MSIX_TABLE_NUM": {
					"type": "integer",
					"minimum": 1,
					"maximum": 2048,
					"default": 64,
					"title": "Maximum number of MSI-X tables per device",
					"description": "<dl class=\"simple\">\n<dt>Specify the maximum number of Message Signaled Interrupt MSI-X tables per device.</dt>\n<dd><p>The default value is calculated from the board configuration file.</p>\n</dd>\n</dl>"
				},
				"MAX_EMULATED_MMIO": {
					"type": "integer",
					"minimum": 1,
					"maximum": 128,
					"default": 16,
					"title": "Maximum number of emulated MMIO regions",
					"description": "<dl class=\"simple\">\n<dt>Specify the maximum number of emulated MMIO regions for device virtualization. The</dt>\n<dd><p>default value is calculated from the board configuration file.</p>\n</dd>\n</dl>"
				}
			}
		},
		"HVAdvancedConfigType": {
			"type": "object",
			"required": [
				"FEATURES",
				"MEMORY",
				"CAPACITIES"
			],
			"properties": {
				"FEATURES": {
					"$ref": "#/definitions/AdvancedFeatureOptionsType",
					"title": "Hypervisor features",
					"description": "<p>Enable hypervisor features.</p>"
				},
				"MEMORY": {
					"$ref": "#/definitions/AdvancedMemoryOptionsType",
					"title": "Memory options",
					"description": "<p>Configure memory used by the hypervisor.</p>"
				},
				"CAPACITIES": {
					"$ref": "#/definitions/AdvancedCapacitiesOptionsType",
					"title": "Hypervisor capacities",
					"description": "<p>Configure the capacities of the hypervisor.</p>"
				}
			}
		}
	}
}